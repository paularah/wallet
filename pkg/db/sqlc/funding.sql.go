// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: funding.sql

package db

import (
	"context"
)

const createFunding = `-- name: CreateFunding :one
INSERT INTO fundings (user_id, wallet_id, amount, success) 
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, wallet_id, amount, success, created_at
`

type CreateFundingParams struct {
	UserID   int64 `json:"user_id"`
	WalletID int64 `json:"wallet_id"`
	Amount   int64 `json:"amount"`
	Success  bool  `json:"success"`
}

func (q *Queries) CreateFunding(ctx context.Context, arg CreateFundingParams) (Funding, error) {
	row := q.queryRow(ctx, q.createFundingStmt, createFunding,
		arg.UserID,
		arg.WalletID,
		arg.Amount,
		arg.Success,
	)
	var i Funding
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletID,
		&i.Amount,
		&i.Success,
		&i.CreatedAt,
	)
	return i, err
}

const getFunding = `-- name: GetFunding :one
SELECT id, wallet_id, amount, created_at FROM entries 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFunding(ctx context.Context, id int64) (Entry, error) {
	row := q.queryRow(ctx, q.getFundingStmt, getFunding, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getWalletFunding = `-- name: GetWalletFunding :one
SELECT id, wallet_id, amount, created_at FROM entries 
WHERE wallet_id = $1 
ORDER BY id 
LIMIT $2
OFFSET $3
`

type GetWalletFundingParams struct {
	WalletID int64 `json:"wallet_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) GetWalletFunding(ctx context.Context, arg GetWalletFundingParams) (Entry, error) {
	row := q.queryRow(ctx, q.getWalletFundingStmt, getWalletFunding, arg.WalletID, arg.Limit, arg.Offset)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listWalletFunding = `-- name: ListWalletFunding :one
SELECT id, wallet_id, amount, created_at FROM entries 
WHERE wallet_id = $1 LIMIT 1
`

func (q *Queries) ListWalletFunding(ctx context.Context, walletID int64) (Entry, error) {
	row := q.queryRow(ctx, q.listWalletFundingStmt, listWalletFunding, walletID)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
