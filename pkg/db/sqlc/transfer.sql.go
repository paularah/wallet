// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: transfer.sql

package db

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (sender_wallet_id, receiver_wallet_id, amount)
VALUES ($1, $2, $3)
RETURNING id, sender_wallet_id, receiver_wallet_id, amount, created_at
`

type CreateTransferParams struct {
	SenderWalletID   int64 `json:"sender_wallet_id"`
	ReceiverWalletID int64 `json:"receiver_wallet_id"`
	Amount           int64 `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.queryRow(ctx, q.createTransferStmt, createTransfer, arg.SenderWalletID, arg.ReceiverWalletID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.SenderWalletID,
		&i.ReceiverWalletID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, sender_wallet_id, receiver_wallet_id, amount, created_at FROM transfers WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.queryRow(ctx, q.getTransferStmt, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.SenderWalletID,
		&i.ReceiverWalletID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT id, sender_wallet_id, receiver_wallet_id, amount, created_at FROM transfers
WHERE sender_wallet_id = $1 OR receiver_wallet_id = $2
ORDER BY id 
LIMIT $3
OFFSET $4
`

type ListTransfersParams struct {
	SenderWalletID   int64 `json:"sender_wallet_id"`
	ReceiverWalletID int64 `json:"receiver_wallet_id"`
	Limit            int32 `json:"limit"`
	Offset           int32 `json:"offset"`
}

func (q *Queries) ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error) {
	rows, err := q.query(ctx, q.listTransfersStmt, listTransfers,
		arg.SenderWalletID,
		arg.ReceiverWalletID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.SenderWalletID,
			&i.ReceiverWalletID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
