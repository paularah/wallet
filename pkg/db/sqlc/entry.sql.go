// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: entry.sql

package db

import (
	"context"
)

const createWalletEntry = `-- name: CreateWalletEntry :one
INSERT INTO entries (wallet_id, amount) 
VALUES ($1, $2)
RETURNING id, wallet_id, amount, created_at
`

type CreateWalletEntryParams struct {
	WalletID int64 `json:"wallet_id"`
	Amount   int64 `json:"amount"`
}

func (q *Queries) CreateWalletEntry(ctx context.Context, arg CreateWalletEntryParams) (Entry, error) {
	row := q.queryRow(ctx, q.createWalletEntryStmt, createWalletEntry, arg.WalletID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getWalletEntry = `-- name: GetWalletEntry :one
SELECT id, wallet_id, amount, created_at FROM entries 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWalletEntry(ctx context.Context, id int64) (Entry, error) {
	row := q.queryRow(ctx, q.getWalletEntryStmt, getWalletEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listWalletEntries = `-- name: ListWalletEntries :one
SELECT id, wallet_id, amount, created_at FROM entries 
WHERE wallet_id = $1 
ORDER BY id 
LIMIT $2 
OFFSET $3
`

type ListWalletEntriesParams struct {
	WalletID int64 `json:"wallet_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListWalletEntries(ctx context.Context, arg ListWalletEntriesParams) (Entry, error) {
	row := q.queryRow(ctx, q.listWalletEntriesStmt, listWalletEntries, arg.WalletID, arg.Limit, arg.Offset)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
