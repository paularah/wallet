// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addWalletBalanceStmt, err = db.PrepareContext(ctx, addWalletBalance); err != nil {
		return nil, fmt.Errorf("error preparing query AddWalletBalance: %w", err)
	}
	if q.createTransferStmt, err = db.PrepareContext(ctx, createTransfer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransfer: %w", err)
	}
	if q.createWalletStmt, err = db.PrepareContext(ctx, createWallet); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWallet: %w", err)
	}
	if q.createWalletEntryStmt, err = db.PrepareContext(ctx, createWalletEntry); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWalletEntry: %w", err)
	}
	if q.deleteWalletStmt, err = db.PrepareContext(ctx, deleteWallet); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWallet: %w", err)
	}
	if q.getTransferStmt, err = db.PrepareContext(ctx, getTransfer); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransfer: %w", err)
	}
	if q.getWalletStmt, err = db.PrepareContext(ctx, getWallet); err != nil {
		return nil, fmt.Errorf("error preparing query GetWallet: %w", err)
	}
	if q.getWalletEntryStmt, err = db.PrepareContext(ctx, getWalletEntry); err != nil {
		return nil, fmt.Errorf("error preparing query GetWalletEntry: %w", err)
	}
	if q.getWalletForUpdateStmt, err = db.PrepareContext(ctx, getWalletForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query GetWalletForUpdate: %w", err)
	}
	if q.listTransfersStmt, err = db.PrepareContext(ctx, listTransfers); err != nil {
		return nil, fmt.Errorf("error preparing query ListTransfers: %w", err)
	}
	if q.listWalletEntriesStmt, err = db.PrepareContext(ctx, listWalletEntries); err != nil {
		return nil, fmt.Errorf("error preparing query ListWalletEntries: %w", err)
	}
	if q.listWalletsStmt, err = db.PrepareContext(ctx, listWallets); err != nil {
		return nil, fmt.Errorf("error preparing query ListWallets: %w", err)
	}
	if q.updateWalletStmt, err = db.PrepareContext(ctx, updateWallet); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWallet: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addWalletBalanceStmt != nil {
		if cerr := q.addWalletBalanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addWalletBalanceStmt: %w", cerr)
		}
	}
	if q.createTransferStmt != nil {
		if cerr := q.createTransferStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransferStmt: %w", cerr)
		}
	}
	if q.createWalletStmt != nil {
		if cerr := q.createWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWalletStmt: %w", cerr)
		}
	}
	if q.createWalletEntryStmt != nil {
		if cerr := q.createWalletEntryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWalletEntryStmt: %w", cerr)
		}
	}
	if q.deleteWalletStmt != nil {
		if cerr := q.deleteWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWalletStmt: %w", cerr)
		}
	}
	if q.getTransferStmt != nil {
		if cerr := q.getTransferStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransferStmt: %w", cerr)
		}
	}
	if q.getWalletStmt != nil {
		if cerr := q.getWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWalletStmt: %w", cerr)
		}
	}
	if q.getWalletEntryStmt != nil {
		if cerr := q.getWalletEntryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWalletEntryStmt: %w", cerr)
		}
	}
	if q.getWalletForUpdateStmt != nil {
		if cerr := q.getWalletForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWalletForUpdateStmt: %w", cerr)
		}
	}
	if q.listTransfersStmt != nil {
		if cerr := q.listTransfersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTransfersStmt: %w", cerr)
		}
	}
	if q.listWalletEntriesStmt != nil {
		if cerr := q.listWalletEntriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listWalletEntriesStmt: %w", cerr)
		}
	}
	if q.listWalletsStmt != nil {
		if cerr := q.listWalletsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listWalletsStmt: %w", cerr)
		}
	}
	if q.updateWalletStmt != nil {
		if cerr := q.updateWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWalletStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                     DBTX
	tx                     *sql.Tx
	addWalletBalanceStmt   *sql.Stmt
	createTransferStmt     *sql.Stmt
	createWalletStmt       *sql.Stmt
	createWalletEntryStmt  *sql.Stmt
	deleteWalletStmt       *sql.Stmt
	getTransferStmt        *sql.Stmt
	getWalletStmt          *sql.Stmt
	getWalletEntryStmt     *sql.Stmt
	getWalletForUpdateStmt *sql.Stmt
	listTransfersStmt      *sql.Stmt
	listWalletEntriesStmt  *sql.Stmt
	listWalletsStmt        *sql.Stmt
	updateWalletStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                     tx,
		tx:                     tx,
		addWalletBalanceStmt:   q.addWalletBalanceStmt,
		createTransferStmt:     q.createTransferStmt,
		createWalletStmt:       q.createWalletStmt,
		createWalletEntryStmt:  q.createWalletEntryStmt,
		deleteWalletStmt:       q.deleteWalletStmt,
		getTransferStmt:        q.getTransferStmt,
		getWalletStmt:          q.getWalletStmt,
		getWalletEntryStmt:     q.getWalletEntryStmt,
		getWalletForUpdateStmt: q.getWalletForUpdateStmt,
		listTransfersStmt:      q.listTransfersStmt,
		listWalletEntriesStmt:  q.listWalletEntriesStmt,
		listWalletsStmt:        q.listWalletsStmt,
		updateWalletStmt:       q.updateWalletStmt,
	}
}
